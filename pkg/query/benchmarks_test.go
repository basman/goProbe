// Code generated by benchgen/main.go; DO NOT EDIT
package query

import (
	"bytes"
	"os/exec"
	"testing"

	lg "github.com/els0r/log"
)

// Pre-defined Benchmarks
// The filesystem cache is flushed after every run of the queryto ensure that
// I/O is properly accounted for

func BenchmarkStdQueryJSONOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithFormat("json"),
		}...,
	)

	flushCaches()

	_ = buf
}

func BenchmarkStdQueryJSONOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithFormat("json"),
			WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryTableOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryTableOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryCSVOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithFormat("csv"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryCSVOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithCondition("dport eq 443"),
			WithFormat("csv"),
		}...,
	)

	_ = buf
}

func benchQuery(b *testing.B, buf *bytes.Buffer, flushFunc func(), iface, query string,
	opts ...Option) {
	for n := 0; n < b.N; n++ {

		// prepare query
		args := NewArgs(query, iface, opts...)
		query, err := args.Prepare(buf)
		if err != nil {
			b.Fatalf("error during prepare: %s", err)
		}

		// run query
		_, err = query.Execute()
		if err != nil {
			b.Fatalf("error during execute: %s", err)
		}

		buf.Reset()

		if flushFunc != nil {
			flushFunc()
		}
	}
}

func flushCaches() {
	var log = lg.NewTextLogger()

	// call arch specific implementation
	cmd := exec.Command(syncCmd[0], syncCmd[1:]...)
	err := cmd.Start()
	if err != nil {
		log.Error(err)
	}
	err = cmd.Wait()
	if err != nil {
		log.Error(err)
	}
}
// AUTO-GENERATED COMBINATIONS
// These benchmarks provide most input combinations to the query engines. They are
// meant for assessing the performance of specific DB accesses (e.g. long queries vs.
// short, convoluted conditions vs. none, etc.)
//
// Each benchmark follows a naming convention that allows easy selection of a subset when
// invoking "go run":
//      Benchmark + "IDENT" + q + "QUERYTYPE" + i + "IFACENAME" + n + "NUMRESULTS"
//                + o + "OUTPUTFORMAT" + c + "CONDITIONSIZE"
//
// Parameters are written ALL CAPS. IDENT can be one of the following:
//  - STD: runs bencharks with file system cache flush enabled (to test the whole pipeline)
//  - NF: doesn't flush the file system cache after every run
//
// Example: select all benchmarks running queries on eth1
//      go test -v -bench -run=BenchmarkNFqSIPDIPiETH1

// Benchmarks (AUTO-GENERATED, DO NOT EDIT)

// Benchmark: 1, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 6, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 7, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 8, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 9, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 11, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 12, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 13, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 14, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 16, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 17, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 18, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 19, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 22, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 23, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 24, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 25, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 27, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 28, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 29, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 30, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 32, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 33, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 34, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 35, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 37, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 38, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 39, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 40, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 43, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 44, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 45, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 46, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 48, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 49, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 50, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 51, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 53, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 54, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 55, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 56, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 58, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 59, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 60, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 61, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 64, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 65, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 66, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 67, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 69, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 70, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 71, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 72, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 74, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 75, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 76, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 77, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 79, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 80, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 81, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 82, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 85, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 86, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 87, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 88, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 90, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 91, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 92, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 93, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 95, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 96, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 97, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 98, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 100, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 101, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 102, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 103, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 107, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 108, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 109, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 110, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 112, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 113, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 114, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 115, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 117, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 118, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 119, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 120, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 122, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 123, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 124, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 125, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 128, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 129, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 130, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 131, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 133, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 134, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 135, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 136, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 138, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 139, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 140, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 141, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 143, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 144, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 145, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 146, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 149, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 150, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 151, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 152, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 154, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 155, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 156, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 157, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 159, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 160, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 161, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 162, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 164, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 165, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 166, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 167, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 170, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 171, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 172, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 173, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 175, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 176, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 177, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 178, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 180, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 181, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 182, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 183, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 185, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 186, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 187, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 188, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 191, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 192, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 193, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 194, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 196, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 197, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 198, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 199, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 201, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 202, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 203, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 204, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 206, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 207, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 208, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 209, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 213, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 214, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 215, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 216, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 218, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 219, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 220, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 221, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 223, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 224, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 225, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 226, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 228, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 229, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 230, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 231, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 234, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 235, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 236, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 237, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 239, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 240, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 241, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 242, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 244, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 245, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 246, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 247, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 249, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 250, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 251, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 252, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 255, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 256, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 257, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 258, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 260, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 261, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 262, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 263, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 265, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 266, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 267, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 268, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 270, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 271, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 272, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 273, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 276, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 277, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 278, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 279, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 281, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 282, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 283, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 284, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 286, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 287, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 288, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 289, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 291, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 292, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 293, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 294, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 297, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 298, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 299, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 300, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 302, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 303, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 304, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 305, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 307, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 308, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 309, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 310, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 312, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 313, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 314, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 315, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 319, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 320, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 321, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 322, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 324, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 325, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 326, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 327, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 329, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 330, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 331, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 332, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 334, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 335, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 336, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 337, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 340, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 341, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 342, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 343, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 345, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 346, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 347, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 348, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 350, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 351, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 352, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 353, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 355, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 356, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 357, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 358, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 361, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 362, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 363, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 364, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 366, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 367, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 368, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 369, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 371, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 372, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 373, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 374, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 376, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 377, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 378, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 379, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 382, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 383, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 384, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 385, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 387, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 388, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 389, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 390, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 392, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 393, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 394, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 395, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 397, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 398, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 399, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 400, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 403, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 404, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 405, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 406, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 408, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 409, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 410, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 411, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 413, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 414, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 415, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 416, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 418, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 419, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 420, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 421, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 425, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 426, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 427, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 428, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 430, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 431, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 432, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 433, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 435, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 436, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 437, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 438, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 440, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 441, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 442, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 443, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 446, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 447, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 448, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 449, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 451, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 452, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 453, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 454, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 456, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 457, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 458, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 459, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 461, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 462, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 463, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 464, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 467, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 468, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 469, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 470, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 472, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 473, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 474, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 475, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 477, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 478, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 479, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 480, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 482, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 483, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 484, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 485, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 488, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 489, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 490, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 491, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 493, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 494, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 495, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 496, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 498, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 499, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 500, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 501, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 503, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 504, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 505, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 506, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 509, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 510, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 511, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 512, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 514, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 515, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 516, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 517, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 519, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 520, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 521, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 522, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 524, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 525, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 526, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 527, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 531, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 532, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 533, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 534, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 536, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 537, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 538, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 539, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 541, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 542, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 543, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 544, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 546, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 547, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 548, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 549, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 552, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 553, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 554, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 555, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 557, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 558, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 559, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 560, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 562, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 563, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 564, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 565, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 567, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 568, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 569, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 570, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 573, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 574, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 575, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 576, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 578, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 579, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 580, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 581, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 583, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 584, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 585, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 586, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 588, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 589, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 590, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 591, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 594, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 595, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 596, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 597, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 599, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 600, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 601, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 602, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 604, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 605, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 606, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 607, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 609, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 610, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 611, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 612, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 615, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 616, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 617, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 618, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 620, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 621, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 622, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 623, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 625, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 626, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 627, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 628, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 630, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 631, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 632, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 633, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 637, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 638, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 639, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 640, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 642, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 643, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 644, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 645, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 647, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 648, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 649, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 650, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 652, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 653, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 654, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 655, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 658, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 659, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 660, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 661, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 663, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 664, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 665, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 666, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 668, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 669, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 670, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 671, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 673, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 674, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 675, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 676, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 679, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 680, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 681, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 682, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 684, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 685, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 686, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 687, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 689, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 690, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 691, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 692, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 694, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 695, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 696, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 697, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 700, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 701, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 702, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 703, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 705, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 706, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 707, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 708, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 710, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 711, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 712, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 713, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 715, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 716, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 717, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 718, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 721, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 722, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 723, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 724, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 726, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 727, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 728, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 729, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 731, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 732, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 733, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 734, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 736, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 737, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 738, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 739, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 744, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 745, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 746, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 747, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 749, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 750, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 751, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 752, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 754, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 755, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 756, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 757, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 759, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 760, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 761, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 762, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 765, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 766, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 767, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 768, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 770, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 771, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 772, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 773, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 775, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 776, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 777, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 778, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 780, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 781, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 782, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 783, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 786, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 787, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 788, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 789, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 791, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 792, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 793, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 794, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 796, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 797, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 798, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 799, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 801, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 802, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 803, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 804, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 807, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 808, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 809, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 810, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 812, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 813, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 814, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 815, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 817, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 818, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 819, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 820, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 822, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 823, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 824, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 825, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 828, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 829, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 830, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 831, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 833, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 834, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 835, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 836, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 838, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 839, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 840, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 841, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 843, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 844, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 845, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 846, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 850, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 851, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 852, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 853, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 855, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 856, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 857, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 858, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 860, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 861, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 862, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 863, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 865, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 866, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 867, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 868, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 871, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 872, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 873, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 874, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 876, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 877, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 878, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 879, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 881, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 882, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 883, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 884, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 886, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 887, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 888, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 889, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 892, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 893, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 894, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 895, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 897, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 898, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 899, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 900, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 902, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 903, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 904, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 905, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 907, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 908, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 909, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 910, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 913, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 914, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 915, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 916, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 918, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 919, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 920, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 921, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 923, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 924, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 925, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 926, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 928, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 929, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 930, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 931, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 934, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 935, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 936, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 937, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 939, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 940, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 941, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 942, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 944, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 945, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 946, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 947, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 949, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 950, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 951, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 952, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 956, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 957, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 958, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 959, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 961, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 962, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 963, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 964, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 966, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 967, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 968, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 969, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 971, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 972, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 973, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 974, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 977, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 978, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 979, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 980, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 982, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 983, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 984, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 985, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 987, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 988, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 989, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 990, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 992, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 993, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 994, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 995, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 998, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 999, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1000, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1001, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1003, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1004, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1005, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1006, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1008, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1009, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1010, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1011, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1013, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1014, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1015, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1016, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1019, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1020, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1021, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1022, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1024, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1025, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1026, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1027, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1029, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1030, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1031, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1032, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1034, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1035, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1036, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1037, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1040, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1041, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1042, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1043, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1045, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1046, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1047, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1048, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1050, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1051, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1052, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1053, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1055, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1056, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1057, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1058, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1062, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1063, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1064, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1065, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1067, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1068, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1069, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1070, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1072, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1073, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1074, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1075, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1077, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1078, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1079, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1080, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1083, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1084, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1085, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1086, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1088, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1089, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1090, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1091, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1093, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1094, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1095, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1096, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1098, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1099, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1100, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1101, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1104, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1105, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1106, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1107, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1109, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1110, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1111, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1112, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1114, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1115, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1116, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1117, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1119, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1120, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1121, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1122, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1125, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1126, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1127, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1128, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1130, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1131, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1132, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1133, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1135, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1136, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1137, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1138, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1140, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1141, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1142, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1143, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1146, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1147, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1148, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1149, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1151, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1152, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1153, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1154, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1156, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1157, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1158, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1159, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1161, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1162, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1163, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1164, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1168, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1169, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1170, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1171, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1173, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1174, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1175, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1176, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1178, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1179, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1180, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1181, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1183, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1184, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1185, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1186, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1189, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1190, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1191, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1192, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1194, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1195, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1196, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1197, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1199, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1200, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1201, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1202, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1204, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1205, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1206, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1207, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1210, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1211, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1212, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1213, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1215, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1216, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1217, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1218, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1220, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1221, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1222, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1223, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1225, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1226, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1227, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1228, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1231, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1232, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1233, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1234, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1236, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1237, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1238, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1239, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1241, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1242, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1243, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1244, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1246, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1247, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1248, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1249, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1252, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1253, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1254, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1255, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1257, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1258, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1259, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1260, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1262, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1263, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1264, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1265, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1267, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1268, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1269, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1270, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1274, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1275, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1276, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1277, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1279, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1280, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1281, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1282, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1284, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1285, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1286, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1287, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1289, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1290, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1291, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1292, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1295, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1296, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1297, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1298, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1300, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1301, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1302, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1303, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1305, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1306, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1307, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1308, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1310, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1311, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1312, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1313, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1316, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1317, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1318, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1319, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1321, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1322, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1323, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1324, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1326, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1327, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1328, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1329, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1331, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1332, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1333, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1334, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1337, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1338, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1339, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1340, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1342, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1343, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1344, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1345, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1347, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1348, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1349, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1350, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1352, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1353, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1354, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1355, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1358, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1359, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1360, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1361, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1363, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1364, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1365, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1366, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1368, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1369, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1370, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1371, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1373, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1374, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1375, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1376, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1380, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1381, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1382, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1383, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1385, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1386, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1387, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1388, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1390, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1391, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1392, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1393, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1395, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1396, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1397, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1398, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1401, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1402, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1403, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1404, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1406, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1407, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1408, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1409, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1411, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1412, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1413, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1414, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1416, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1417, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1418, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1419, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1422, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1423, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1424, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1425, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1427, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1428, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1429, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1430, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1432, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1433, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1434, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1435, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1437, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1438, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1439, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1440, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1443, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1444, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1445, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1446, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1448, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1449, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1450, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1451, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1453, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1454, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1455, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1456, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1458, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1459, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1460, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1461, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1464, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1465, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1466, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1467, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1469, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1470, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1471, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1472, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1474, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1475, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1476, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1477, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1479, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1480, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1481, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1482, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1487, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1488, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1489, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1490, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1492, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1493, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1494, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1495, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1497, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1498, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1499, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1500, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1502, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1503, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1504, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1505, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1508, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1509, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1510, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1511, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1513, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1514, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1515, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1516, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1518, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1519, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1520, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1521, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1523, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1524, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1525, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1526, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1529, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1530, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1531, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1532, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1534, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1535, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1536, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1537, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1539, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1540, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1541, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1542, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1544, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1545, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1546, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1547, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1550, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1551, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1552, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1553, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1555, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1556, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1557, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1558, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1560, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1561, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1562, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1563, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1565, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1566, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1567, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1568, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1571, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1572, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1573, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1574, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1576, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1577, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1578, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1579, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1581, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1582, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1583, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1584, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1586, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1587, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1588, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1589, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1593, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1594, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1595, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1596, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1598, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1599, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1600, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1601, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1603, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1604, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1605, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1606, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1608, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1609, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1610, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1611, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1614, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1615, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1616, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1617, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1619, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1620, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1621, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1622, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1624, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1625, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1626, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1627, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1629, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1630, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1631, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1632, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1635, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1636, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1637, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1638, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1640, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1641, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1642, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1643, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1645, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1646, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1647, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1648, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1650, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1651, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1652, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1653, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1656, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1657, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1658, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1659, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1661, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1662, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1663, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1664, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1666, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1667, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1668, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1669, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1671, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1672, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1673, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1674, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1677, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1678, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1679, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1680, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1682, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1683, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1684, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1685, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1687, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1688, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1689, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1690, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1692, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1693, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1694, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1695, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1699, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1700, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1701, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1702, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1704, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1705, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1706, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1707, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1709, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1710, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1711, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1712, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1714, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1715, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1716, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1717, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1720, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1721, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1722, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1723, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1725, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1726, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1727, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1728, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1730, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1731, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1732, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1733, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1735, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1736, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1737, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1738, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1741, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1742, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1743, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1744, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1746, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1747, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1748, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1749, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1751, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1752, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1753, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1754, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1756, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1757, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1758, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1759, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1762, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1763, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1764, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1765, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1767, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1768, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1769, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1770, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1772, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1773, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1774, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1775, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1777, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1778, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1779, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1780, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1783, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1784, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1785, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1786, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1788, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1789, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1790, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1791, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1793, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1794, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1795, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1796, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1798, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1799, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1800, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1801, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1805, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1806, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1807, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1808, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1810, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1811, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1812, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1813, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1815, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1816, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1817, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1818, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1820, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1821, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1822, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1823, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1826, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1827, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1828, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1829, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1831, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1832, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1833, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1834, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1836, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1837, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1838, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1839, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1841, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1842, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1843, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1844, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1847, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1848, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1849, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1850, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1852, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1853, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1854, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1855, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1857, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1858, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1859, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1860, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1862, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1863, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1864, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1865, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1868, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1869, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1870, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1871, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1873, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1874, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1875, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1876, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1878, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1879, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1880, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1881, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1883, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1884, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1885, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1886, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1889, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1890, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1891, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1892, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1894, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1895, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1896, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1897, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1899, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1900, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1901, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1902, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1904, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1905, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1906, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1907, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1911, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1912, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1913, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1914, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1916, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1917, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1918, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1919, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1921, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1922, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1923, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1924, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1926, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1927, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1928, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1929, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1932, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1933, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1934, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1935, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1937, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1938, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1939, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1940, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1942, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1943, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1944, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1945, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1947, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1948, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1949, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1950, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1953, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1954, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1955, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1956, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1958, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1959, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1960, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1961, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1963, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1964, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1965, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1966, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1968, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1969, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1970, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1971, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1974, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1975, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1976, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1977, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 1979, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1980, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1981, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1982, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 1984, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1985, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1986, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1987, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1989, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1990, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1991, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1992, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 1995, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1996, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1997, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 1998, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2000, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2001, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2002, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2003, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2005, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2006, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2007, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2008, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2010, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2011, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2012, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2013, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2017, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2018, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2019, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2020, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2022, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2023, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2024, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2025, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2027, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2028, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2029, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2030, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2032, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2033, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2034, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2035, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2038, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2039, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2040, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2041, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2043, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2044, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2045, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2046, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2048, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2049, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2050, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2051, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2053, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2054, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2055, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2056, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2059, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2060, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2061, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2062, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2064, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2065, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2066, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2067, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2069, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2070, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2071, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2072, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2074, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2075, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2076, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2077, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2080, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2081, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2082, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2083, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2085, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2086, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2087, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2088, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2090, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2091, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2092, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2093, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2095, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2096, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2097, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2098, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2101, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2102, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2103, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2104, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2106, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2107, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2108, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2109, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2111, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2112, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2113, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2114, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2116, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2117, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2118, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2119, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2123, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2124, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2125, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2126, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2128, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2129, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2130, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2131, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2133, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2134, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2135, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2136, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2138, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2139, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2140, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2141, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2144, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2145, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2146, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2147, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2149, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2150, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2151, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2152, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2154, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2155, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2156, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2157, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2159, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2160, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2161, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2162, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2165, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2166, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2167, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2168, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2170, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2171, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2172, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2173, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2175, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2176, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2177, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2178, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2180, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2181, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2182, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2183, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2186, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2187, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2188, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2189, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2191, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2192, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2193, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2194, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2196, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2197, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2198, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2199, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2201, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2202, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2203, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2204, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2207, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2208, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2209, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2210, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2212, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2213, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2214, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2215, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2217, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2218, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2219, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2220, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2222, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2223, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2224, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2225, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2230, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2231, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2232, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2233, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2235, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2236, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2237, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2238, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2240, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2241, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2242, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2243, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2245, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2246, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2247, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2248, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2251, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2252, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2253, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2254, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2256, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2257, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2258, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2259, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2261, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2262, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2263, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2264, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2266, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2267, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2268, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2269, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2272, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2273, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2274, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2275, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2277, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2278, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2279, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2280, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2282, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2283, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2284, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2285, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2287, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2288, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2289, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2290, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2293, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2294, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2295, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2296, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2298, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2299, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2300, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2301, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2303, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2304, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2305, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2306, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2308, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2309, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2310, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2311, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2314, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2315, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2316, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2317, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2319, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2320, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2321, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2322, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2324, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2325, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2326, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2327, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2329, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2330, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2331, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2332, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2336, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2337, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2338, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2339, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2341, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2342, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2343, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2344, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2346, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2347, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2348, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2349, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2351, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2352, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2353, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2354, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2357, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2358, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2359, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2360, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2362, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2363, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2364, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2365, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2367, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2368, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2369, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2370, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2372, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2373, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2374, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2375, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2378, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2379, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2380, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2381, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2383, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2384, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2385, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2386, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2388, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2389, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2390, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2391, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2393, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2394, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2395, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2396, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2399, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2400, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2401, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2402, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2404, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2405, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2406, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2407, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2409, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2410, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2411, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2412, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2414, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2415, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2416, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2417, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2420, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2421, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2422, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2423, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2425, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2426, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2427, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2428, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2430, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2431, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2432, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2433, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2435, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2436, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2437, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2438, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2442, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2443, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2444, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2445, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2447, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2448, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2449, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2450, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2452, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2453, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2454, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2455, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2457, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2458, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2459, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2460, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2463, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2464, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2465, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2466, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2468, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2469, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2470, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2471, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2473, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2474, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2475, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2476, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2478, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2479, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2480, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2481, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2484, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2485, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2486, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2487, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2489, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2490, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2491, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2492, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2494, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2495, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2496, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2497, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2499, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2500, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2501, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2502, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2505, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2506, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2507, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2508, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2510, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2511, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2512, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2513, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2515, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2516, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2517, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2518, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2520, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2521, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2522, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2523, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2526, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2527, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2528, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2529, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2531, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2532, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2533, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2534, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2536, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2537, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2538, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2539, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2541, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2542, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2543, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2544, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2548, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2549, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2550, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2551, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2553, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2554, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2555, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2556, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2558, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2559, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2560, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2561, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2563, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2564, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2565, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2566, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2569, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2570, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2571, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2572, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2574, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2575, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2576, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2577, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2579, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2580, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2581, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2582, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2584, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2585, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2586, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2587, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2590, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2591, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2592, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2593, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2595, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2596, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2597, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2598, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2600, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2601, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2602, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2603, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2605, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2606, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2607, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2608, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2611, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2612, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2613, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2614, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2616, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2617, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2618, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2619, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2621, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2622, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2623, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2624, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2626, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2627, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2628, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2629, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2632, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2633, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2634, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2635, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2637, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2638, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2639, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2640, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2642, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2643, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2644, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2645, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2647, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2648, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2649, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2650, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2654, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2655, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2656, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2657, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2659, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2660, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2661, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2662, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2664, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2665, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2666, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2667, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2669, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2670, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2671, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2672, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2675, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2676, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2677, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2678, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2680, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2681, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2682, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2683, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2685, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2686, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2687, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2688, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2690, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2691, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2692, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2693, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2696, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2697, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2698, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2699, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2701, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2702, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2703, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2704, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2706, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2707, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2708, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2709, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2711, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2712, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2713, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2714, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2717, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2718, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2719, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2720, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2722, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2723, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2724, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2725, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2727, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2728, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2729, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2730, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2732, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2733, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2734, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2735, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2738, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2739, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2740, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2741, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2743, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2744, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2745, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2746, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2748, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2749, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2750, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2751, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2753, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2754, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2755, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2756, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2760, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2761, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2762, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2763, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2765, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2766, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2767, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2768, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2770, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2771, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2772, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2773, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2775, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2776, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2777, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2778, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2781, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2782, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2783, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2784, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2786, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2787, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2788, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2789, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2791, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2792, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2793, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2794, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2796, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2797, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2798, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2799, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2802, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2803, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2804, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2805, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2807, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2808, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2809, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2810, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2812, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2813, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2814, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2815, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2817, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2818, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2819, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2820, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2823, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2824, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2825, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2826, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2828, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2829, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2830, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2831, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2833, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2834, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2835, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2836, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2838, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2839, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2840, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2841, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2844, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2845, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2846, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2847, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2849, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2850, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2851, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2852, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2854, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2855, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2856, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2857, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2859, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2860, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2861, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2862, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2866, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2867, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2868, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2869, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2871, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2872, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2873, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2874, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2876, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2877, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2878, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2879, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2881, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2882, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2883, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2884, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2887, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2888, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2889, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2890, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2892, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2893, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2894, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2895, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2897, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2898, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2899, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2900, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2902, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2903, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2904, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2905, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2908, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2909, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2910, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2911, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2913, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2914, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2915, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2916, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2918, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2919, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2920, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2921, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2923, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2924, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2925, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2926, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2929, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2930, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2931, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2932, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2934, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2935, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2936, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2937, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2939, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2940, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2941, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2942, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2944, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2945, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2946, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2947, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2950, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2951, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2952, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2953, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2955, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2956, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2957, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2958, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2960, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2961, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2962, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2963, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2965, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2966, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2967, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2968, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2973, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2974, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2975, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2976, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2978, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2979, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2980, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2981, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 2983, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2984, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2985, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2986, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 2988, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2989, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2990, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2991, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 2994, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2995, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2996, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2997, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 2999, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3000, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3001, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3002, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3004, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3005, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3006, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3007, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3009, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3010, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3011, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3012, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3015, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3016, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3017, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3018, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3020, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3021, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3022, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3023, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3025, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3026, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3027, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3028, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3030, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3031, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3032, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3033, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3036, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3037, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3038, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3039, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3041, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3042, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3043, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3044, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3046, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3047, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3048, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3049, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3051, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3052, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3053, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3054, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3057, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3058, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3059, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3060, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3062, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3063, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3064, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3065, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3067, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3068, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3069, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3070, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3072, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3073, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3074, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3075, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3079, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3080, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3081, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3082, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3084, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3085, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3086, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3087, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3089, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3090, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3091, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3092, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3094, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3095, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3096, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3097, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3100, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3101, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3102, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3103, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3105, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3106, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3107, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3108, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3110, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3111, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3112, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3113, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3115, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3116, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3117, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3118, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3121, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3122, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3123, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3124, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3126, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3127, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3128, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3129, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3131, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3132, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3133, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3134, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3136, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3137, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3138, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3139, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3142, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3143, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3144, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3145, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3147, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3148, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3149, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3150, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3152, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3153, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3154, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3155, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3157, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3158, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3159, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3160, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3163, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3164, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3165, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3166, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3168, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3169, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3170, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3171, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3173, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3174, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3175, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3176, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3178, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3179, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3180, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3181, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3185, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3186, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3187, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3188, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3190, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3191, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3192, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3193, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3195, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3196, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3197, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3198, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3200, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3201, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3202, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3203, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3206, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3207, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3208, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3209, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3211, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3212, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3213, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3214, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3216, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3217, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3218, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3219, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3221, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3222, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3223, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3224, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3227, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3228, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3229, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3230, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3232, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3233, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3234, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3235, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3237, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3238, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3239, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3240, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3242, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3243, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3244, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3245, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3248, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3249, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3250, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3251, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3253, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3254, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3255, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3256, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3258, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3259, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3260, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3261, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3263, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3264, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3265, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3266, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3269, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3270, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3271, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3272, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3274, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3275, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3276, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3277, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3279, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3280, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3281, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3282, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3284, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3285, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3286, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3287, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3291, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3292, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3293, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3294, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3296, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3297, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3298, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3299, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3301, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3302, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3303, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3304, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3306, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3307, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3308, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3309, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3312, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3313, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3314, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3315, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3317, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3318, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3319, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3320, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3322, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3323, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3324, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3325, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3327, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3328, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3329, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3330, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3333, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3334, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3335, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3336, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3338, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3339, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3340, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3341, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3343, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3344, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3345, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3346, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3348, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3349, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3350, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3351, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3354, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3355, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3356, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3357, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3359, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3360, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3361, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3362, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3364, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3365, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3366, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3367, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3369, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3370, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3371, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3372, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3375, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3376, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3377, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3378, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3380, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3381, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3382, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3383, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3385, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3386, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3387, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3388, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3390, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3391, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3392, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3393, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3397, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3398, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3399, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3400, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3402, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3403, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3404, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3405, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3407, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3408, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3409, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3410, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3412, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3413, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3414, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3415, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3418, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3419, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3420, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3421, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3423, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3424, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3425, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3426, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3428, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3429, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3430, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3431, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3433, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3434, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3435, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3436, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3439, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3440, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3441, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3442, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3444, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3445, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3446, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3447, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3449, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3450, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3451, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3452, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3454, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3455, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3456, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3457, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3460, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3461, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3462, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3463, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3465, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3466, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3467, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3468, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3470, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3471, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3472, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3473, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3475, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3476, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3477, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3478, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3481, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3482, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3483, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3484, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3486, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3487, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3488, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3489, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3491, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3492, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3493, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3494, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3496, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3497, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3498, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3499, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3503, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3504, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3505, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3506, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3508, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3509, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3510, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3511, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3513, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3514, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3515, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3516, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3518, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3519, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3520, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3521, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3524, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3525, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3526, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3527, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3529, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3530, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3531, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3532, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3534, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3535, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3536, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3537, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3539, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3540, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3541, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3542, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3545, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3546, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3547, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3548, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3550, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3551, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3552, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3553, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3555, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3556, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3557, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3558, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3560, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3561, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3562, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3563, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3566, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3567, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3568, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3569, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3571, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3572, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3573, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3574, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3576, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3577, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3578, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3579, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3581, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3582, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3583, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3584, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3587, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3588, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3589, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3590, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3592, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3593, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3594, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3595, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3597, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3598, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3599, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3600, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3602, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3603, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3604, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3605, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3609, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3610, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3611, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3612, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3614, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3615, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3616, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3617, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3619, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3620, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3621, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3622, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3624, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3625, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3626, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3627, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3630, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3631, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3632, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3633, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3635, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3636, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3637, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3638, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3640, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3641, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3642, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3643, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3645, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3646, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3647, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3648, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3651, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3652, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3653, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3654, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3656, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3657, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3658, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3659, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3661, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3662, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3663, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3664, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3666, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3667, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3668, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3669, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3672, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3673, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3674, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3675, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3677, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3678, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3679, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3680, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3682, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3683, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3684, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3685, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3687, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3688, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3689, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3690, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3693, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3694, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3695, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3696, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3698, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3699, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3700, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3701, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3703, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3704, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3705, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3706, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3708, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3709, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3710, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3711, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3716, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3717, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3718, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3719, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3721, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3722, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3723, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3724, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3726, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3727, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3728, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3729, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3731, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3732, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3733, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3734, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3737, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3738, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3739, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3740, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3742, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3743, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3744, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3745, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3747, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3748, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3749, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3750, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3752, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3753, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3754, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3755, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3758, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3759, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3760, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3761, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3763, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3764, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3765, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3766, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3768, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3769, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3770, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3771, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3773, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3774, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3775, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3776, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3779, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3780, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3781, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3782, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3784, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3785, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3786, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3787, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3789, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3790, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3791, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3792, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3794, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3795, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3796, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3797, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3800, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3801, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3802, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3803, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3805, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3806, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3807, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3808, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3810, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3811, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3812, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3813, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3815, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3816, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3817, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3818, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3822, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3823, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3824, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3825, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3827, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3828, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3829, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3830, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3832, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3833, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3834, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3835, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3837, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3838, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3839, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3840, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3843, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3844, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3845, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3846, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3848, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3849, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3850, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3851, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3853, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3854, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3855, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3856, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3858, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3859, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3860, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3861, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3864, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3865, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3866, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3867, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3869, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3870, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3871, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3872, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3874, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3875, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3876, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3877, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3879, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3880, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3881, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3882, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3885, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3886, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3887, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3888, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3890, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3891, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3892, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3893, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3895, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3896, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3897, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3898, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3900, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3901, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3902, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3903, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3906, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3907, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3908, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3909, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3911, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3912, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3913, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3914, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3916, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3917, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3918, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3919, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3921, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3922, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3923, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3924, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3928, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3929, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3930, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3931, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3933, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3934, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3935, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3936, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3938, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3939, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3940, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3941, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3943, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3944, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3945, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3946, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3949, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3950, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3951, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3952, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3954, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3955, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3956, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3957, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3959, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3960, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3961, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3962, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3964, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3965, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3966, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3967, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3970, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3971, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3972, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3973, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3975, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3976, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3977, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3978, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3980, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3981, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3982, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3983, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 3985, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3986, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3987, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3988, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 3991, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3992, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3993, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3994, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 3996, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3997, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3998, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 3999, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4001, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4002, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4003, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4004, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4006, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4007, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4008, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4009, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4012, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4013, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4014, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4015, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4017, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4018, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4019, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4020, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4022, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4023, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4024, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4025, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4027, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4028, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4029, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4030, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4034, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4035, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4036, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4037, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4039, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4040, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4041, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4042, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4044, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4045, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4046, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4047, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4049, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4050, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4051, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4052, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4055, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4056, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4057, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4058, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4060, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4061, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4062, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4063, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4065, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4066, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4067, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4068, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4070, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4071, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4072, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4073, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4076, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4077, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4078, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4079, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4081, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4082, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4083, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4084, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4086, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4087, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4088, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4089, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4091, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4092, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4093, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4094, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4097, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4098, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4099, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4100, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4102, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4103, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4104, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4105, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4107, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4108, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4109, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4110, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4112, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4113, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4114, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4115, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4118, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4119, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4120, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4121, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4123, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4124, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4125, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4126, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4128, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4129, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4130, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4131, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4133, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4134, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4135, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4136, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4140, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4141, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4142, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4143, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4145, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4146, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4147, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4148, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4150, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4151, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4152, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4153, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4155, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4156, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4157, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4158, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4161, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4162, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4163, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4164, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4166, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4167, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4168, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4169, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4171, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4172, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4173, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4174, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4176, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4177, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4178, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4179, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4182, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4183, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4184, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4185, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4187, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4188, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4189, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4190, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4192, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4193, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4194, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4195, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4197, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4198, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4199, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4200, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4203, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4204, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4205, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4206, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4208, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4209, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4210, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4211, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4213, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4214, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4215, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4216, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4218, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4219, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4220, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4221, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4224, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4225, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4226, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4227, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4229, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4230, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4231, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4232, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4234, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4235, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4236, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4237, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4239, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4240, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4241, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4242, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4246, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4247, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4248, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4249, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4251, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4252, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4253, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4254, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4256, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4257, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4258, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4259, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4261, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4262, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4263, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4264, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4267, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4268, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4269, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4270, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4272, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4273, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4274, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4275, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4277, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4278, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4279, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4280, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4282, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4283, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4284, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4285, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4288, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4289, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4290, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4291, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4293, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4294, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4295, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4296, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4298, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4299, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4300, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4301, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4303, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4304, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4305, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4306, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4309, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4310, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4311, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4312, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4314, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4315, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4316, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4317, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4319, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4320, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4321, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4322, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4324, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4325, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4326, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4327, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4330, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4331, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4332, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4333, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4335, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4336, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4337, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4338, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4340, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4341, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4342, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4343, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4345, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4346, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4347, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4348, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4352, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4353, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4354, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4355, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4357, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4358, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4359, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4360, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4362, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4363, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4364, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4365, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4367, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4368, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4369, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4370, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4373, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4374, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4375, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4376, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4378, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4379, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4380, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4381, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4383, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4384, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4385, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4386, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4388, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4389, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4390, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4391, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(10),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4394, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4395, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4396, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4397, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4399, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4400, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4401, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4402, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4404, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4405, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4406, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4407, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4409, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4410, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4411, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4412, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(100),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4415, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4416, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4417, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4418, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4420, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4421, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4422, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4423, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4425, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4426, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4427, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4428, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4430, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4431, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4432, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4433, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(1000),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4436, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4437, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4438, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4439, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition(""),
            }...,
	)

	_ = buf
}
// Benchmark: 4441, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4442, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4443, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4444, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443"),
            }...,
	)

	_ = buf
}
// Benchmark: 4446, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4447, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4448, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4449, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("dport eq 443 and proto eq tcp"),
            }...,
	)

	_ = buf
}
// Benchmark: 4451, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4452, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4453, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}
// Benchmark: 4454, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoINFLUXDBcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(9999999999999999),
            WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
            }...,
	)

	_ = buf
}

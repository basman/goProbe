package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/els0r/goProbe/pkg/query"
	lg "github.com/els0r/log"
)

var (
	benchmarkBase = `// Code generated by benchgen/main.go; DO NOT EDIT
package query

import (
	"bytes"
	"os/exec"
	"testing"

	lg "github.com/els0r/log"
)

// Pre-defined Benchmarks
// The filesystem cache is flushed after every run of the queryto ensure that
// I/O is properly accounted for

func BenchmarkStdQueryJSONOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithFormat("json"),
		}...,
	)

	flushCaches()

	_ = buf
}

func BenchmarkStdQueryJSONOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithFormat("json"),
			WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryTableOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryTableOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryCSVOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithFormat("csv"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryCSVOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults(MaxResults),
			WithCondition("dport eq 443"),
			WithFormat("csv"),
		}...,
	)

	_ = buf
}

func benchQuery(b *testing.B, buf *bytes.Buffer, flushFunc func(), iface, query string,
	opts ...Option) {
	for n := 0; n < b.N; n++ {

		// prepare query
		args := NewArgs(query, iface, opts...)
		query, err := args.Prepare(buf)
		if err != nil {
			b.Fatalf("error during prepare: ` + "%%s" + `", err)
		}

		// run query
		_, err = query.Execute()
		if err != nil {
			b.Fatalf("error during execute: ` + "%%s" + `", err)
		}

		buf.Reset()

		if flushFunc != nil {
			flushFunc()
		}
	}
}

func flushCaches() {
	var log = lg.NewTextLogger()

	// call arch specific implementation
	cmd := exec.Command(syncCmd[0], syncCmd[1:]...)
	err := cmd.Start()
	if err != nil {
		log.Error(err)
	}
	err = cmd.Wait()
	if err != nil {
		log.Error(err)
	}
}
`
	benchmarkTemplate = `// AUTO-GENERATED COMBINATIONS
// These benchmarks provide most input combinations to the query engines. They are
// meant for assessing the performance of specific DB accesses (e.g. long queries vs.
// short, convoluted conditions vs. none, etc.)
//
// Each benchmark follows a naming convention that allows easy selection of a subset when
// invoking "go run":
//      Benchmark + "IDENT" + q + "QUERYTYPE" + i + "IFACENAME" + n + "NUMRESULTS"
//                + o + "OUTPUTFORMAT" + c + "CONDITIONSIZE"
//
// Parameters are written ALL CAPS. IDENT can be one of the following:
//  - STD: runs bencharks with file system cache flush enabled (to test the whole pipeline)
//  - NF: doesn't flush the file system cache after every run
//
// Example: select all benchmarks running queries on eth1
//      go test -v -bench -run=BenchmarkNFqSIPDIPiETH1

// Benchmarks (AUTO-GENERATED, DO NOT EDIT)

{{ range . -}}
{{$trimmedQuery := replace .Query "," "" -1 -}}
{{$trimmedIfaces := replace .Iface "," "" -1 -}}
// Benchmark: {{ .ID }}, Query: {{.Query}}, Iface: {{.Iface}}, Condition: {{.Condition}}, N: {{.N}}
func BenchmarkNFq{{$trimmedQuery | upper}}i{{$trimmedIfaces | upper }}n{{if le .N 1000}}{{.N}}{{else}}BIG{{end}}o{{upper .Format}}c{{if ne .Condition ""}}{{upper .Condition}}{{else}}NONE{{end}}(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"{{ .Iface }}", "{{.Query}}",
		[]Option{WithDBPath(TestDB),
			WithFirst("0"),
			WithNumResults({{ .N }}),
            {{if .Condition -}}
            WithCondition("{{ getcondition .Condition }}"),
            {{end -}}
		}...,
	)

	_ = buf
}
{{end -}}
`
)

// First we create a FuncMap with which to register the function.
var funcMap = template.FuncMap{
	"upper":        strings.ToUpper,
	"getcondition": getCondition,
	"replace":      strings.Replace,
}

var log = lg.NewTextLogger()

// TestTuple stores a possible benchmark query configuration. It is used to enumerate different query scenarios.
type TestTuple struct {
	ID        int
	Iface     string
	Query     string
	N         int
	Format    string
	Condition string
}

const testDir = "src/github.com/els0r/goProbe/pkg/query"

func main() {

	var (
		masterTmpl        *template.Template
		allBenchmarksFile *os.File
		err               error
	)

	gopath := os.Getenv("GOPATH")

	outfile := filepath.Join(gopath, testDir, "benchmarks_test.go")

	err = os.RemoveAll(outfile)
	if err != nil {
		log.Errorf("failed to remove previous benchmarks: %s", err)
		os.Exit(1)
	}

	allBenchmarksFile, err = os.OpenFile(outfile, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0755)
	if err != nil {
		log.Errorf("failed to load static benchmarks: %s", err)
		os.Exit(1)
	}

	// write benchmarks base
	_, err = fmt.Fprintf(allBenchmarksFile, benchmarkBase)
	if err != nil {
		log.Errorf("failed to write static benchmarks: %s", err)
		os.Exit(1)
	}

	masterTmpl, err = template.New("master").Funcs(funcMap).Parse(benchmarkTemplate)
	if err != nil {
		log.Errorf("failed to create template: %s", err)
		os.Exit(1)
	}

	// create the struct slice
	var (
		qarg string
		iarg string
	)

	// iterate over all queries
	benchNum := 1
	var tuples []TestTuple
	for i := range queries {
		qarg = strings.Join(queries[:i+1], ",")

		// iterate over all ifaces
		for j := range ifaces {
			iarg = strings.Join(ifaces[:j+1], ",")

			// iterate over all num results
			for _, n := range numResults {

				// iterate over all conditions
				for cname := range testConditions {

					// iterate over all formats
					for format := range query.PermittedFormats {
						tuples = append(tuples, TestTuple{
							ID:        benchNum,
							Iface:     iarg,
							Query:     qarg,
							Condition: cname,
							N:         n,
							Format:    format,
						})
						benchNum++
					}
					benchNum++
				}
				benchNum++
			}
			benchNum++
		}
		benchNum++
	}

	// write combinations to file
	err = masterTmpl.Execute(allBenchmarksFile, tuples)
	if err != nil {
		log.Error(err)
		os.Exit(1)
	}

	allBenchmarksFile.Close()

	os.Exit(0)
}

var testConditions = map[string]string{
	"none":   "", // needed to run queries without conditions
	"single": "dport eq 443",
	"double": "dport eq 443 and proto eq tcp",
	"nested": "((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)",
}

// built-up successively (one iface, two ifaces, etc.)
var ifaces = [...]string{
	"eth0",
	"eth1",
	"eth2",
	"t_c1_fwde",
	"t_c1_fwde1",
	"tun_3g_c1_fw1",
	"tun_3g_c1_fwde",
}

// built-up successively (one attribute, two attributes, etc.)
var queries = [...]string{
	"sip",
	"dip",
	"dport",
	"proto",
	"time",
	"iface",
}

var numResults = [...]int{
	1,
	10,
	100,
	query.DefaultNumResults,
	query.MaxResults,
}

func getCondition(id string) string {
	cond, _ := testConditions[id]
	return cond
}

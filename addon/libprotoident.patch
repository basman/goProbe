diff -rupN libprotoident-2.0.7/lib/libprotoident.cc libprotoident-2.0.7_patched/lib/libprotoident.cc
--- libprotoident-2.0.7/lib/libprotoident.cc	2013-04-07 23:36:20.000000000 +0200
+++ libprotoident-2.0.7_patched/lib/libprotoident.cc	2014-09-04 14:44:14.000000000 +0200
@@ -463,3 +463,94 @@ bool lpi_is_protocol_inactive(lpi_protoc
 
 }
 
+// OSAG addition
+// custom function in order to print out the protocols and serialize them
+// in JSON format in order to have them available for goquery
+void lpi_serialize_protocol_list(){
+
+  LPIModuleMap::iterator itM;
+  LPIModuleList::iterator l_it;
+
+  LPIModuleList *ml;
+
+  int seenIDs[1024] = {};
+  int seenNames[1024] = {};
+
+  printf("/// Autogenerated by goProbe Makefile, do not change\n");
+  printf("package goDB\n\n");
+  printf("var DPIProtocols = map[int][2]string {\n");
+  for(itM=TCP_protocols.begin(); itM!=TCP_protocols.end(); ++itM){
+    ml = itM->second;
+    for (l_it = ml->begin(); l_it != ml->end(); ++l_it) {
+      lpi_module_t *module = *l_it;
+      
+      if (seenIDs[module->protocol] == 1) continue;
+      else seenIDs[module->protocol] = 1;
+
+      printf("%d: {\"%s\", \"%s\"},\n",
+             module->protocol,
+             lpi_print(module->protocol),
+             lpi_print_category(module->category));
+
+    }
+  }
+  for(itM=UDP_protocols.begin(); itM!=UDP_protocols.end(); ++itM){
+    ml = itM->second;
+    for (l_it = ml->begin(); l_it != ml->end(); ++l_it) {
+      lpi_module_t *module = *l_it;
+
+      if (seenIDs[module->protocol] == 1) continue;            
+      else seenIDs[module->protocol] = 1;
+
+      printf("%d: {\"%s\", \"%s\"},\n",
+             module->protocol,
+             lpi_print(module->protocol),
+             lpi_print_category(module->category));
+    }
+  }
+  // also print the uncategorized protocols
+  printf("%d: {\"Unknown_UDP\", \"Uncategorised\"},\n", LPI_PROTO_UDP);
+  printf("%d: {\"Unsupported\", \"Uncategorised\"},\n", LPI_PROTO_UNSUPPORTED);
+  printf("%d: {\"Unknown_TCP\", \"Uncategorised\"},\n",  LPI_PROTO_UNKNOWN);
+  printf("}\n\n");
+
+  printf("var DPIProtocolIDs = map[string]int {\n");               
+  for(itM=TCP_protocols.begin(); itM!=TCP_protocols.end(); ++itM){
+    ml = itM->second;                     
+    for (l_it = ml->begin(); l_it != ml->end(); ++l_it) { 
+      lpi_module_t *module = *l_it;
+ 
+      if (seenNames[module->protocol] == 1) continue;
+      else seenNames[module->protocol] = 1;
+
+      printf("\"%s\": %d,\n",
+             lpi_print(module->protocol),     
+             module->protocol);
+
+    } 
+  } 
+  for(itM=UDP_protocols.begin(); itM!=UDP_protocols.end(); ++itM){ 
+    ml = itM->second; 
+    for (l_it = ml->begin(); l_it != ml->end(); ++l_it) { 
+      lpi_module_t *module = *l_it;
+
+      if (seenNames[module->protocol] == 1) continue;
+      else seenNames[module->protocol] = 1;
+ 
+      printf("\"%s\": %d,\n",
+             lpi_print(module->protocol),  
+             module->protocol); 
+    } 
+  } 
+  // also print the uncategorized protocols 
+  printf("\"Unknown_UDP\": %d,\n", LPI_PROTO_UDP);     
+  printf("\"Unsupported\": %d,\n", LPI_PROTO_UNSUPPORTED);     
+  printf("\"Unknown_TCP\": %d,\n", LPI_PROTO_UNKNOWN);    
+  printf("}\n\n");
+
+
+  printf("func GetDPIProto(id int) string {\n  return DPIProtocols[id][0]\n}\n\n");
+  printf("func GetDPIProtoID(name string) (uint64, bool) {\n  ret, ok := DPIProtocolIDs[name]\n  return uint64(ret), ok\n}\n\n");
+  printf("func GetDPICat(id int) string {\n  return DPIProtocols[id][1]\n}\n\n");
+  printf("func GetDPIProtoCat(id int) (string, string) {\n  return DPIProtocols[id][0], DPIProtocols[id][1]\n}\n");
+}
diff -rupN libprotoident-2.0.7/lib/libprotoident.h libprotoident-2.0.7_patched/lib/libprotoident.h
--- libprotoident-2.0.7/lib/libprotoident.h	2013-11-05 03:01:37.000000000 +0100
+++ libprotoident-2.0.7_patched/lib/libprotoident.h	2014-09-04 14:46:18.123559043 +0200
@@ -116,6 +116,14 @@ typedef enum {
 
 
 typedef enum {
+	// OSAG change: have the invalid protocols on top so that
+	// new protocols can be added at the bottom of the list
+	// without interfering with the numbering in place
+        LPI_PROTO_INVALID,     /* No single valid protocol */
+	LPI_PROTO_NO_PAYLOAD,
+	LPI_PROTO_UNSUPPORTED,
+        LPI_PROTO_UNKNOWN,
+
         /* TCP Protocols */
         LPI_PROTO_HTTP,
         LPI_PROTO_SMTP,
@@ -178,7 +186,6 @@ typedef enum {
 	LPI_PROTO_STEAM,	/* Steam TCP download, i.e. downloading games */
 	LPI_PROTO_TRACKMANIA, 	/* Trackmania control protocol */
 	LPI_PROTO_CONQUER,	/* Conquer Online game */
-	LPI_PROTO_RTMP,		/* Adobe RTMP */
 	LPI_PROTO_TIP,		/* Transaction Internet Protocol */
 	LPI_PROTO_NONSTANDARD_HTTP, /* HTTP on unconventional port numbers */
 	LPI_PROTO_HARVEYS,	/* Photo transfers for Harveys Real Estate */
@@ -416,10 +423,6 @@ typedef enum {
 
 	LPI_PROTO_ICMP,
 
-        LPI_PROTO_INVALID,     /* No single valid protocol */
-	LPI_PROTO_NO_PAYLOAD,
-	LPI_PROTO_UNSUPPORTED,
-        LPI_PROTO_UNKNOWN,
 	LPI_PROTO_LAST		/** ALWAYS have this as the last value */
 } lpi_protocol_t;
 
@@ -559,6 +562,16 @@ lpi_module_t *lpi_guess_protocol(lpi_dat
  *  to avoid reporting anything for the NULL protocols.
  */
 bool lpi_is_protocol_inactive(lpi_protocol_t proto);
+
+/** OSAG addon:
+ *
+ * Prints out all the protocols and their respective categories and serializes
+ * them as a JSON string written to STDOUT. This is a helper routine added to
+ * make the number to protocol/category mapping available to goquery.
+ *
+ */
+void lpi_serialize_protocol_list();
+
 #ifdef __cplusplus 
 }
 #endif
diff -rupN libprotoident-2.0.7/lib/proto_manager.cc libprotoident-2.0.7_patched/lib/proto_manager.cc
--- libprotoident-2.0.7/lib/proto_manager.cc	2013-11-05 03:01:36.000000000 +0100
+++ libprotoident-2.0.7_patched/lib/proto_manager.cc	2014-09-04 14:43:22.146104259 +0200
@@ -174,7 +174,7 @@ int register_tcp_protocols(LPIModuleMap
 	register_rfb(mod_map);
 	register_rpcscan(mod_map);
 	register_rsync(mod_map);
-	register_rtmp(mod_map);
+//	register_rtmp(mod_map);
 	register_rtsp(mod_map);
 	register_runescape(mod_map);
 	register_second_life(mod_map);
diff -rupN libprotoident-2.0.7/lib/tcp/lpi_http_nonstandard.cc libprotoident-2.0.7_patched/lib/tcp/lpi_http_nonstandard.cc
--- libprotoident-2.0.7/lib/tcp/lpi_http_nonstandard.cc	2013-10-21 05:22:35.000000000 +0200
+++ libprotoident-2.0.7_patched/lib/tcp/lpi_http_nonstandard.cc	2014-09-04 14:43:22.146104259 +0200
@@ -46,6 +46,19 @@ static inline bool match_nonstandard_htt
 	 * We might miss some HTTP-based P2P now, but it's just too hard for
 	 * us to differentiate more than this.
 	 */
+	
+	// OSAG addition to include web junk rule
+        if (!match_http_request(data->payload[0], data->payload_len[0])) {
+                if (MATCHSTR(data->payload[1], "HTTP"))
+                        return true;
+        }
+
+        if (!match_http_request(data->payload[1], data->payload_len[1])) {
+                if (MATCHSTR(data->payload[0], "HTTP"))
+                        return true;
+        }
+
+	// general non std port rule
         if (valid_http_port(data))
                 return false;
 
diff -rupN libprotoident-2.0.7/lib/tcp/lpi_rtmp.cc libprotoident-2.0.7_patched/lib/tcp/lpi_rtmp.cc
--- libprotoident-2.0.7/lib/tcp/lpi_rtmp.cc	2013-10-21 05:22:59.000000000 +0200
+++ libprotoident-2.0.7_patched/lib/tcp/lpi_rtmp.cc	1970-01-01 01:00:00.000000000 +0100
@@ -1,111 +0,0 @@
-/* 
- * This file is part of libprotoident
- *
- * Copyright (c) 2011 The University of Waikato, Hamilton, New Zealand.
- * Author: Shane Alcock
- *
- * With contributions from:
- *      Aaron Murrihy
- *      Donald Neal
- *
- * All rights reserved.
- *
- * This code has been developed by the University of Waikato WAND 
- * research group. For further information please see http://www.wand.net.nz/
- *
- * libprotoident is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * libprotoident is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with libprotoident; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- *
- * $Id: lpi_rtmp.cc 155 2013-10-21 03:21:00Z salcock $
- */
-
-#include <string.h>
-
-#include "libprotoident.h"
-#include "proto_manager.h"
-#include "proto_common.h"
-
-static inline bool match_rtmp_server_handshake(uint32_t payload, uint32_t len) {
-
-	if (len < 4)
-		return false;
-
-	/* Standard RTMP handshake types */	
-	if (MATCH(payload, 0x03, ANY, ANY, ANY))
-		return true;
-	if (MATCH(payload, 0x06, ANY, ANY, ANY))
-		return true;
-
-	/* Encrypted, but not RTMPE? */
-	if (MATCH(payload, 0x08, ANY, ANY, ANY))
-		return true;
-
-
-	/* RTMPE handshake type */
-	if (MATCH(payload, 0x09, ANY, ANY, ANY))
-		return true;
-
-	/* New handshake type used by some YouTube videos */
-	if (MATCH(payload, 0x0a, ANY, ANY, ANY))
-		return true;
-
-	return false;
-}
-
-static inline bool match_rtmp_client_handshake(uint32_t payload, uint32_t len) {
-
-	if (len < 4)
-		return false;
-
-	/* Standard RTMP handshake types */	
-	if (MATCH(payload, 0x03, ANY, ANY, ANY))
-		return true;
-	if (MATCH(payload, 0x06, ANY, ANY, ANY))
-		return true;
-
-	return false;
-}
-
-static inline bool match_rtmp(lpi_data_t *data, lpi_module_t *mod UNUSED) {
-
-	if (match_rtmp_client_handshake(data->payload[0], data->payload_len[0]))
-	{
-		if (match_rtmp_server_handshake(data->payload[1], 
-				data->payload_len[1])) {
-			return true;
-		}
-	}
-
-	if (match_rtmp_client_handshake(data->payload[1], data->payload_len[1]))
-	{
-		if (match_rtmp_server_handshake(data->payload[0], 
-				data->payload_len[0])) {
-			return true;
-		}
-	}
-	return false;
-}
-
-static lpi_module_t lpi_rtmp = {
-	LPI_PROTO_RTMP,
-	LPI_CATEGORY_STREAMING,
-	"RTMP",
-	16,	/* Not a strong rule */
-	match_rtmp
-};
-
-void register_rtmp(LPIModuleMap *mod_map) {
-	register_protocol(&lpi_rtmp, mod_map);
-}
-
diff -rupN libprotoident-2.0.7/lib/tcp/lpi_web_junk.cc libprotoident-2.0.7_patched/lib/tcp/lpi_web_junk.cc
--- libprotoident-2.0.7/lib/tcp/lpi_web_junk.cc	2013-10-21 05:23:10.000000000 +0200
+++ libprotoident-2.0.7_patched/lib/tcp/lpi_web_junk.cc	2014-09-04 14:43:22.150104201 +0200
@@ -44,18 +44,9 @@ static inline bool match_web_junk(lpi_da
          * XXX Check flows matching this occasionally for new HTTP request
          * types that we've missed :( 
          */
-        if (data->payload_len[0] == 0 || data->payload_len[1] == 0)
-                return false;
-
-        if (!match_http_request(data->payload[0], data->payload_len[0])) {
-                if (MATCHSTR(data->payload[1], "HTTP"))
-                        return true;
-        }
 
-        if (!match_http_request(data->payload[1], data->payload_len[1])) {
-                if (MATCHSTR(data->payload[0], "HTTP"))
-                        return true;
-        }
+	if (data->payload_len[0] == 0 || data->payload_len[1] == 0)
+                return false;
 
 
 	return false;
@@ -64,7 +55,7 @@ static inline bool match_web_junk(lpi_da
 static lpi_module_t lpi_web_junk = {
 	LPI_PROTO_WEB_JUNK,
 	LPI_CATEGORY_MIXED,
-	"Web_Junk",
+	"HTTP_non_standard",
 	210,
 	match_web_junk
 };
diff -rupN libprotoident-2.0.7/lib/tcp/Makefile.am libprotoident-2.0.7_patched/lib/tcp/Makefile.am
--- libprotoident-2.0.7/lib/tcp/Makefile.am	2013-11-05 03:01:32.000000000 +0100
+++ libprotoident-2.0.7_patched/lib/tcp/Makefile.am	2014-09-04 14:43:22.150104201 +0200
@@ -100,7 +100,6 @@ libprotoident_tcp_la_SOURCES = \
 	lpi_rfb.cc \
 	lpi_rpcscan.cc \
 	lpi_rsync.cc \
-	lpi_rtmp.cc \
 	lpi_rtsp.cc \
 	lpi_runescape.cc \
 	lpi_second_life.cc \
diff -rupN libprotoident-2.0.7/lib/tcp/Makefile.in libprotoident-2.0.7_patched/lib/tcp/Makefile.in
--- libprotoident-2.0.7/lib/tcp/Makefile.in	2013-11-05 03:01:43.000000000 +0100
+++ libprotoident-2.0.7_patched/lib/tcp/Makefile.in	2014-09-04 14:43:22.150104201 +0200
@@ -145,7 +145,6 @@ am_libprotoident_tcp_la_OBJECTS = libpro
 	libprotoident_tcp_la-lpi_rfb.lo \
 	libprotoident_tcp_la-lpi_rpcscan.lo \
 	libprotoident_tcp_la-lpi_rsync.lo \
-	libprotoident_tcp_la-lpi_rtmp.lo \
 	libprotoident_tcp_la-lpi_rtsp.lo \
 	libprotoident_tcp_la-lpi_runescape.lo \
 	libprotoident_tcp_la-lpi_second_life.lo \
@@ -452,7 +451,6 @@ libprotoident_tcp_la_SOURCES = \
 	lpi_rfb.cc \
 	lpi_rpcscan.cc \
 	lpi_rsync.cc \
-	lpi_rtmp.cc \
 	lpi_rtsp.cc \
 	lpi_runescape.cc \
 	lpi_second_life.cc \
@@ -659,7 +657,6 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_rfb.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_rpcscan.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_rsync.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_rtmp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_rtsp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_runescape.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libprotoident_tcp_la-lpi_second_life.Plo@am__quote@
@@ -1534,14 +1531,6 @@ libprotoident_tcp_la-lpi_rsync.lo: lpi_r
 @AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCXX_FALSE@	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libprotoident_tcp_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libprotoident_tcp_la-lpi_rsync.lo `test -f 'lpi_rsync.cc' || echo '$(srcdir)/'`lpi_rsync.cc
 
-libprotoident_tcp_la-lpi_rtmp.lo: lpi_rtmp.cc
-@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libprotoident_tcp_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libprotoident_tcp_la-lpi_rtmp.lo -MD -MP -MF $(DEPDIR)/libprotoident_tcp_la-lpi_rtmp.Tpo -c -o libprotoident_tcp_la-lpi_rtmp.lo `test -f 'lpi_rtmp.cc' || echo '$(srcdir)/'`lpi_rtmp.cc
-@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libprotoident_tcp_la-lpi_rtmp.Tpo $(DEPDIR)/libprotoident_tcp_la-lpi_rtmp.Plo
-@am__fastdepCXX_FALSE@	$(AM_V_CXX) @AM_BACKSLASH@
-@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='lpi_rtmp.cc' object='libprotoident_tcp_la-lpi_rtmp.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCXX_FALSE@	$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libprotoident_tcp_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libprotoident_tcp_la-lpi_rtmp.lo `test -f 'lpi_rtmp.cc' || echo '$(srcdir)/'`lpi_rtmp.cc
-
 libprotoident_tcp_la-lpi_rtsp.lo: lpi_rtsp.cc
 @am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libprotoident_tcp_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libprotoident_tcp_la-lpi_rtsp.lo -MD -MP -MF $(DEPDIR)/libprotoident_tcp_la-lpi_rtsp.Tpo -c -o libprotoident_tcp_la-lpi_rtsp.lo `test -f 'lpi_rtsp.cc' || echo '$(srcdir)/'`lpi_rtsp.cc
 @am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libprotoident_tcp_la-lpi_rtsp.Tpo $(DEPDIR)/libprotoident_tcp_la-lpi_rtsp.Plo
diff -rupN libprotoident-2.0.7/lib/tcp/tcp_protocols.h libprotoident-2.0.7_patched/lib/tcp/tcp_protocols.h
--- libprotoident-2.0.7/lib/tcp/tcp_protocols.h	2013-11-05 03:01:32.000000000 +0100
+++ libprotoident-2.0.7_patched/lib/tcp/tcp_protocols.h	2014-09-04 14:43:22.150104201 +0200
@@ -103,7 +103,7 @@ void register_rejection(LPIModuleMap *mo
 void register_rfb(LPIModuleMap *mod_map);
 void register_rpcscan(LPIModuleMap *mod_map);
 void register_rsync(LPIModuleMap *mod_map);
-void register_rtmp(LPIModuleMap *mod_map);
+//void register_rtmp(LPIModuleMap *mod_map);
 void register_rtsp(LPIModuleMap *mod_map);
 void register_runescape(LPIModuleMap *mod_map);
 void register_second_life(LPIModuleMap *mod_map);
